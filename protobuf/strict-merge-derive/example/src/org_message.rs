// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.11.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]

//! Generated file from `org_message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct Compound {
    // message fields
    pub double_default: f64,
    pub double_non_default: f64,
    pub enum_default: ::protobuf::ProtobufEnumOrUnknown<AnEnum>,
    pub enum_o_default: ::protobuf::ProtobufEnumOrUnknown<AnEnum>,
    pub enum_o_empty: ::protobuf::ProtobufEnumOrUnknown<AnEnum>,
    pub message_default: ::std::option::Option<Inner>,
    pub message_o_default: ::std::option::Option<Inner>,
    pub message_o_empty: ::std::option::Option<Inner>,
    pub bytes_default: ::std::vec::Vec<u8>,
    pub bytes_o_default: ::std::vec::Vec<u8>,
    pub bytes_o_empty: ::std::vec::Vec<u8>,
    pub vec_double_default: ::std::vec::Vec<f64>,
    pub vec_double_o_default: ::std::vec::Vec<f64>,
    pub vec_double_o_empty: ::std::vec::Vec<f64>,
    // message oneof groups
    pub one_of_double: ::std::option::Option<compound::One_of_double>,
    pub one_of_enum: ::std::option::Option<compound::One_of_enum>,
    pub one_of_message: ::std::option::Option<compound::One_of_message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Compound {
    fn default() -> &'a Compound {
        <Compound as ::protobuf::Message>::default_instance()
    }
}

impl Compound {
    pub fn new() -> Compound {
        ::std::default::Default::default()
    }

    // double a_double_0 = 9;

    pub fn get_a_double_0(&self) -> f64 {
        match self.one_of_double {
            ::std::option::Option::Some(compound::One_of_double::a_double_0(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_a_double_0(&mut self) {
        self.one_of_double = ::std::option::Option::None;
    }

    pub fn has_a_double_0(&self) -> bool {
        match self.one_of_double {
            ::std::option::Option::Some(compound::One_of_double::a_double_0(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a_double_0(&mut self, v: f64) {
        self.one_of_double = ::std::option::Option::Some(compound::One_of_double::a_double_0(v))
    }

    // .benji.infra.req.AnEnum an_enum_0 = 10;

    pub fn get_an_enum_0(&self) -> AnEnum {
        match self.one_of_double {
            ::std::option::Option::Some(compound::One_of_double::an_enum_0(v)) => ::protobuf::ProtobufEnumOrUnknown::enum_value_or_default(&v),
            _ => AnEnum::NOT_SET,
        }
    }

    pub fn clear_an_enum_0(&mut self) {
        self.one_of_double = ::std::option::Option::None;
    }

    pub fn has_an_enum_0(&self) -> bool {
        match self.one_of_double {
            ::std::option::Option::Some(compound::One_of_double::an_enum_0(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_an_enum_0(&mut self, v: AnEnum) {
        self.one_of_double = ::std::option::Option::Some(compound::One_of_double::an_enum_0(::protobuf::ProtobufEnumOrUnknown::new(v)))
    }

    // .benji.infra.req.Inner a_message_0 = 11;

    pub fn get_a_message_0(&self) -> &Inner {
        match self.one_of_double {
            ::std::option::Option::Some(compound::One_of_double::a_message_0(ref v)) => v,
            _ => <Inner as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_a_message_0(&mut self) {
        self.one_of_double = ::std::option::Option::None;
    }

    pub fn has_a_message_0(&self) -> bool {
        match self.one_of_double {
            ::std::option::Option::Some(compound::One_of_double::a_message_0(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a_message_0(&mut self, v: Inner) {
        self.one_of_double = ::std::option::Option::Some(compound::One_of_double::a_message_0(v))
    }

    // Mutable pointer to the field.
    pub fn mut_a_message_0(&mut self) -> &mut Inner {
        if let ::std::option::Option::Some(compound::One_of_double::a_message_0(_)) = self.one_of_double {
        } else {
            self.one_of_double = ::std::option::Option::Some(compound::One_of_double::a_message_0(Inner::new()));
        }
        match self.one_of_double {
            ::std::option::Option::Some(compound::One_of_double::a_message_0(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_a_message_0(&mut self) -> Inner {
        if self.has_a_message_0() {
            match self.one_of_double.take() {
                ::std::option::Option::Some(compound::One_of_double::a_message_0(v)) => v,
                _ => panic!(),
            }
        } else {
            Inner::new()
        }
    }

    // double a_double_1 = 12;

    pub fn get_a_double_1(&self) -> f64 {
        match self.one_of_enum {
            ::std::option::Option::Some(compound::One_of_enum::a_double_1(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_a_double_1(&mut self) {
        self.one_of_enum = ::std::option::Option::None;
    }

    pub fn has_a_double_1(&self) -> bool {
        match self.one_of_enum {
            ::std::option::Option::Some(compound::One_of_enum::a_double_1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a_double_1(&mut self, v: f64) {
        self.one_of_enum = ::std::option::Option::Some(compound::One_of_enum::a_double_1(v))
    }

    // .benji.infra.req.AnEnum an_enum_1 = 13;

    pub fn get_an_enum_1(&self) -> AnEnum {
        match self.one_of_enum {
            ::std::option::Option::Some(compound::One_of_enum::an_enum_1(v)) => ::protobuf::ProtobufEnumOrUnknown::enum_value_or_default(&v),
            _ => AnEnum::NOT_SET,
        }
    }

    pub fn clear_an_enum_1(&mut self) {
        self.one_of_enum = ::std::option::Option::None;
    }

    pub fn has_an_enum_1(&self) -> bool {
        match self.one_of_enum {
            ::std::option::Option::Some(compound::One_of_enum::an_enum_1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_an_enum_1(&mut self, v: AnEnum) {
        self.one_of_enum = ::std::option::Option::Some(compound::One_of_enum::an_enum_1(::protobuf::ProtobufEnumOrUnknown::new(v)))
    }

    // .benji.infra.req.Inner a_message_1 = 14;

    pub fn get_a_message_1(&self) -> &Inner {
        match self.one_of_enum {
            ::std::option::Option::Some(compound::One_of_enum::a_message_1(ref v)) => v,
            _ => <Inner as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_a_message_1(&mut self) {
        self.one_of_enum = ::std::option::Option::None;
    }

    pub fn has_a_message_1(&self) -> bool {
        match self.one_of_enum {
            ::std::option::Option::Some(compound::One_of_enum::a_message_1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a_message_1(&mut self, v: Inner) {
        self.one_of_enum = ::std::option::Option::Some(compound::One_of_enum::a_message_1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_a_message_1(&mut self) -> &mut Inner {
        if let ::std::option::Option::Some(compound::One_of_enum::a_message_1(_)) = self.one_of_enum {
        } else {
            self.one_of_enum = ::std::option::Option::Some(compound::One_of_enum::a_message_1(Inner::new()));
        }
        match self.one_of_enum {
            ::std::option::Option::Some(compound::One_of_enum::a_message_1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_a_message_1(&mut self) -> Inner {
        if self.has_a_message_1() {
            match self.one_of_enum.take() {
                ::std::option::Option::Some(compound::One_of_enum::a_message_1(v)) => v,
                _ => panic!(),
            }
        } else {
            Inner::new()
        }
    }

    // double a_double_2 = 15;

    pub fn get_a_double_2(&self) -> f64 {
        match self.one_of_message {
            ::std::option::Option::Some(compound::One_of_message::a_double_2(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_a_double_2(&mut self) {
        self.one_of_message = ::std::option::Option::None;
    }

    pub fn has_a_double_2(&self) -> bool {
        match self.one_of_message {
            ::std::option::Option::Some(compound::One_of_message::a_double_2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a_double_2(&mut self, v: f64) {
        self.one_of_message = ::std::option::Option::Some(compound::One_of_message::a_double_2(v))
    }

    // .benji.infra.req.AnEnum an_enum_2 = 16;

    pub fn get_an_enum_2(&self) -> AnEnum {
        match self.one_of_message {
            ::std::option::Option::Some(compound::One_of_message::an_enum_2(v)) => ::protobuf::ProtobufEnumOrUnknown::enum_value_or_default(&v),
            _ => AnEnum::NOT_SET,
        }
    }

    pub fn clear_an_enum_2(&mut self) {
        self.one_of_message = ::std::option::Option::None;
    }

    pub fn has_an_enum_2(&self) -> bool {
        match self.one_of_message {
            ::std::option::Option::Some(compound::One_of_message::an_enum_2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_an_enum_2(&mut self, v: AnEnum) {
        self.one_of_message = ::std::option::Option::Some(compound::One_of_message::an_enum_2(::protobuf::ProtobufEnumOrUnknown::new(v)))
    }

    // .benji.infra.req.Inner a_message_2 = 17;

    pub fn get_a_message_2(&self) -> &Inner {
        match self.one_of_message {
            ::std::option::Option::Some(compound::One_of_message::a_message_2(ref v)) => v,
            _ => <Inner as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_a_message_2(&mut self) {
        self.one_of_message = ::std::option::Option::None;
    }

    pub fn has_a_message_2(&self) -> bool {
        match self.one_of_message {
            ::std::option::Option::Some(compound::One_of_message::a_message_2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a_message_2(&mut self, v: Inner) {
        self.one_of_message = ::std::option::Option::Some(compound::One_of_message::a_message_2(v))
    }

    // Mutable pointer to the field.
    pub fn mut_a_message_2(&mut self) -> &mut Inner {
        if let ::std::option::Option::Some(compound::One_of_message::a_message_2(_)) = self.one_of_message {
        } else {
            self.one_of_message = ::std::option::Option::Some(compound::One_of_message::a_message_2(Inner::new()));
        }
        match self.one_of_message {
            ::std::option::Option::Some(compound::One_of_message::a_message_2(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_a_message_2(&mut self) -> Inner {
        if self.has_a_message_2() {
            match self.one_of_message.take() {
                ::std::option::Option::Some(compound::One_of_message::a_message_2(v)) => v,
                _ => panic!(),
            }
        } else {
            Inner::new()
        }
    }
}

impl ::protobuf::Message for Compound {
    fn is_initialized(&self) -> bool {
        for v in &self.message_default {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.message_o_default {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.message_o_empty {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(compound::One_of_double::a_message_0(ref v)) = self.one_of_double {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(compound::One_of_enum::a_message_1(ref v)) = self.one_of_enum {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(compound::One_of_message::a_message_2(ref v)) = self.one_of_message {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.double_default = is.read_double()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.double_non_default = is.read_double()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.enum_default = is.read_enum_or_unknown()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.enum_o_default = is.read_enum_or_unknown()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.enum_o_empty = is.read_enum_or_unknown()?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into::<Inner, _>(wire_type, is, &mut self.message_default)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into::<Inner, _>(wire_type, is, &mut self.message_o_default)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into::<Inner, _>(wire_type, is, &mut self.message_o_empty)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_double = ::std::option::Option::Some(compound::One_of_double::a_double_0(is.read_double()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_double = ::std::option::Option::Some(compound::One_of_double::an_enum_0(is.read_enum_or_unknown()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_double = ::std::option::Option::Some(compound::One_of_double::a_message_0(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_enum = ::std::option::Option::Some(compound::One_of_enum::a_double_1(is.read_double()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_enum = ::std::option::Option::Some(compound::One_of_enum::an_enum_1(is.read_enum_or_unknown()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_enum = ::std::option::Option::Some(compound::One_of_enum::a_message_1(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_message = ::std::option::Option::Some(compound::One_of_message::a_double_2(is.read_double()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_message = ::std::option::Option::Some(compound::One_of_message::an_enum_2(is.read_enum_or_unknown()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_message = ::std::option::Option::Some(compound::One_of_message::a_message_2(is.read_message()?));
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes_default)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes_o_default)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes_o_empty)?;
                },
                21 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.vec_double_default)?;
                },
                22 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.vec_double_o_default)?;
                },
                23 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.vec_double_o_empty)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.double_default != 0. {
            my_size += 9;
        }
        if self.double_non_default != 0. {
            my_size += 9;
        }
        if self.enum_default != ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET) {
            my_size += ::protobuf::rt::enum_or_unknown_size(3, self.enum_default);
        }
        if self.enum_o_default != ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET) {
            my_size += ::protobuf::rt::enum_or_unknown_size(4, self.enum_o_default);
        }
        if self.enum_o_empty != ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET) {
            my_size += ::protobuf::rt::enum_or_unknown_size(5, self.enum_o_empty);
        }
        if let Some(v) = self.message_default.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.message_o_default.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.message_o_empty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.bytes_default.is_empty() {
            my_size += ::protobuf::rt::bytes_size(18, &self.bytes_default);
        }
        if !self.bytes_o_default.is_empty() {
            my_size += ::protobuf::rt::bytes_size(19, &self.bytes_o_default);
        }
        if !self.bytes_o_empty.is_empty() {
            my_size += ::protobuf::rt::bytes_size(20, &self.bytes_o_empty);
        }
        my_size += 10 * self.vec_double_default.len() as u32;
        my_size += 10 * self.vec_double_o_default.len() as u32;
        my_size += 10 * self.vec_double_o_empty.len() as u32;
        if let ::std::option::Option::Some(ref v) = self.one_of_double {
            match v {
                &compound::One_of_double::a_double_0(v) => {
                    my_size += 9;
                },
                &compound::One_of_double::an_enum_0(v) => {
                    my_size += ::protobuf::rt::enum_or_unknown_size(10, v);
                },
                &compound::One_of_double::a_message_0(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_enum {
            match v {
                &compound::One_of_enum::a_double_1(v) => {
                    my_size += 9;
                },
                &compound::One_of_enum::an_enum_1(v) => {
                    my_size += ::protobuf::rt::enum_or_unknown_size(13, v);
                },
                &compound::One_of_enum::a_message_1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_message {
            match v {
                &compound::One_of_message::a_double_2(v) => {
                    my_size += 9;
                },
                &compound::One_of_message::an_enum_2(v) => {
                    my_size += ::protobuf::rt::enum_or_unknown_size(16, v);
                },
                &compound::One_of_message::a_message_2(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.double_default != 0. {
            os.write_double(1, self.double_default)?;
        }
        if self.double_non_default != 0. {
            os.write_double(2, self.double_non_default)?;
        }
        if self.enum_default != ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET) {
            os.write_enum(3, ::protobuf::ProtobufEnumOrUnknown::value(&self.enum_default))?;
        }
        if self.enum_o_default != ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET) {
            os.write_enum(4, ::protobuf::ProtobufEnumOrUnknown::value(&self.enum_o_default))?;
        }
        if self.enum_o_empty != ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET) {
            os.write_enum(5, ::protobuf::ProtobufEnumOrUnknown::value(&self.enum_o_empty))?;
        }
        if let Some(v) = self.message_default.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.message_o_default.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.message_o_empty.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if !self.bytes_default.is_empty() {
            os.write_bytes(18, &self.bytes_default)?;
        }
        if !self.bytes_o_default.is_empty() {
            os.write_bytes(19, &self.bytes_o_default)?;
        }
        if !self.bytes_o_empty.is_empty() {
            os.write_bytes(20, &self.bytes_o_empty)?;
        }
        for v in &self.vec_double_default {
            os.write_double(21, *v)?;
        };
        for v in &self.vec_double_o_default {
            os.write_double(22, *v)?;
        };
        for v in &self.vec_double_o_empty {
            os.write_double(23, *v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.one_of_double {
            match v {
                &compound::One_of_double::a_double_0(v) => {
                    os.write_double(9, v)?;
                },
                &compound::One_of_double::an_enum_0(v) => {
                    os.write_enum(10, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
                },
                &compound::One_of_double::a_message_0(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_enum {
            match v {
                &compound::One_of_enum::a_double_1(v) => {
                    os.write_double(12, v)?;
                },
                &compound::One_of_enum::an_enum_1(v) => {
                    os.write_enum(13, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
                },
                &compound::One_of_enum::a_message_1(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_message {
            match v {
                &compound::One_of_message::a_double_2(v) => {
                    os.write_double(15, v)?;
                },
                &compound::One_of_message::an_enum_2(v) => {
                    os.write_enum(16, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
                },
                &compound::One_of_message::a_message_2(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Compound {
        Compound::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "double_default",
                |m: &Compound| { &m.double_default },
                |m: &mut Compound| { &mut m.double_default },
            ));
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "double_non_default",
                |m: &Compound| { &m.double_non_default },
                |m: &mut Compound| { &mut m.double_non_default },
            ));
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeEnumOrUnknown<AnEnum>>(
                "enum_default",
                |m: &Compound| { &m.enum_default },
                |m: &mut Compound| { &mut m.enum_default },
            ));
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeEnumOrUnknown<AnEnum>>(
                "enum_o_default",
                |m: &Compound| { &m.enum_o_default },
                |m: &mut Compound| { &mut m.enum_o_default },
            ));
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeEnumOrUnknown<AnEnum>>(
                "enum_o_empty",
                |m: &Compound| { &m.enum_o_empty },
                |m: &mut Compound| { &mut m.enum_o_empty },
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<Inner>, _>(
                "message_default",
                |m: &Compound| { &m.message_default },
                |m: &mut Compound| { &mut m.message_default },
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<Inner>, _>(
                "message_o_default",
                |m: &Compound| { &m.message_o_default },
                |m: &mut Compound| { &mut m.message_o_default },
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<Inner>, _>(
                "message_o_empty",
                |m: &Compound| { &m.message_o_empty },
                |m: &mut Compound| { &mut m.message_o_empty },
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_copy_has_get_set_accessors::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "a_double_0",
                Compound::has_a_double_0,
                Compound::get_a_double_0,
                Compound::set_a_double_0,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_copy_has_get_set_accessors::<_, ::protobuf::reflect::types::ProtobufTypeEnum<AnEnum>>(
                "an_enum_0",
                Compound::has_an_enum_0,
                Compound::get_an_enum_0,
                Compound::set_an_enum_0,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, Inner>(
                "a_message_0",
                Compound::has_a_message_0,
                Compound::get_a_message_0,
                Compound::mut_a_message_0,
                Compound::set_a_message_0,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_copy_has_get_set_accessors::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "a_double_1",
                Compound::has_a_double_1,
                Compound::get_a_double_1,
                Compound::set_a_double_1,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_copy_has_get_set_accessors::<_, ::protobuf::reflect::types::ProtobufTypeEnum<AnEnum>>(
                "an_enum_1",
                Compound::has_an_enum_1,
                Compound::get_an_enum_1,
                Compound::set_an_enum_1,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, Inner>(
                "a_message_1",
                Compound::has_a_message_1,
                Compound::get_a_message_1,
                Compound::mut_a_message_1,
                Compound::set_a_message_1,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_copy_has_get_set_accessors::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "a_double_2",
                Compound::has_a_double_2,
                Compound::get_a_double_2,
                Compound::set_a_double_2,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_copy_has_get_set_accessors::<_, ::protobuf::reflect::types::ProtobufTypeEnum<AnEnum>>(
                "an_enum_2",
                Compound::has_an_enum_2,
                Compound::get_an_enum_2,
                Compound::set_an_enum_2,
            ));
            fields.push(::protobuf::reflect::rt::make_oneof_message_has_get_mut_set_accessor::<_, Inner>(
                "a_message_2",
                Compound::has_a_message_2,
                Compound::get_a_message_2,
                Compound::mut_a_message_2,
                Compound::set_a_message_2,
            ));
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes>(
                "bytes_default",
                |m: &Compound| { &m.bytes_default },
                |m: &mut Compound| { &mut m.bytes_default },
            ));
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes>(
                "bytes_o_default",
                |m: &Compound| { &m.bytes_o_default },
                |m: &mut Compound| { &mut m.bytes_o_default },
            ));
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeBytes>(
                "bytes_o_empty",
                |m: &Compound| { &m.bytes_o_empty },
                |m: &mut Compound| { &mut m.bytes_o_empty },
            ));
            fields.push(::protobuf::reflect::rt::make_vec_accessor::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "vec_double_default",
                |m: &Compound| { &m.vec_double_default },
                |m: &mut Compound| { &mut m.vec_double_default },
            ));
            fields.push(::protobuf::reflect::rt::make_vec_accessor::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "vec_double_o_default",
                |m: &Compound| { &m.vec_double_o_default },
                |m: &mut Compound| { &mut m.vec_double_o_default },
            ));
            fields.push(::protobuf::reflect::rt::make_vec_accessor::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "vec_double_o_empty",
                |m: &Compound| { &m.vec_double_o_empty },
                |m: &mut Compound| { &mut m.vec_double_o_empty },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<Compound>(
                "Compound",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Compound {
        static instance: ::protobuf::rt::Lazy<Compound> = ::protobuf::rt::Lazy::INIT;
        instance.get(Compound::new)
    }
}

impl ::protobuf::Clear for Compound {
    fn clear(&mut self) {
        self.double_default = 0.;
        self.double_non_default = 0.;
        self.enum_default = ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET);
        self.enum_o_default = ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET);
        self.enum_o_empty = ::protobuf::ProtobufEnumOrUnknown::new(AnEnum::NOT_SET);
        self.message_default = ::std::option::Option::None;
        self.message_o_default = ::std::option::Option::None;
        self.message_o_empty = ::std::option::Option::None;
        self.one_of_double = ::std::option::Option::None;
        self.one_of_double = ::std::option::Option::None;
        self.one_of_double = ::std::option::Option::None;
        self.one_of_enum = ::std::option::Option::None;
        self.one_of_enum = ::std::option::Option::None;
        self.one_of_enum = ::std::option::Option::None;
        self.one_of_message = ::std::option::Option::None;
        self.one_of_message = ::std::option::Option::None;
        self.one_of_message = ::std::option::Option::None;
        self.bytes_default.clear();
        self.bytes_o_default.clear();
        self.bytes_o_empty.clear();
        self.vec_double_default.clear();
        self.vec_double_o_default.clear();
        self.vec_double_o_empty.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Compound {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Compound {
}

/// Nested message and enums of message `Compound`
pub mod compound {

    #[derive(Clone,PartialEq,Debug)]
    pub enum One_of_double {
        a_double_0(f64),
        an_enum_0(::protobuf::ProtobufEnumOrUnknown<super::AnEnum>),
        a_message_0(super::Inner),
    }

    impl ::protobuf::Oneof for One_of_double {
    }

    #[derive(Clone,PartialEq,Debug)]
    pub enum One_of_enum {
        a_double_1(f64),
        an_enum_1(::protobuf::ProtobufEnumOrUnknown<super::AnEnum>),
        a_message_1(super::Inner),
    }

    impl ::protobuf::Oneof for One_of_enum {
    }

    #[derive(Clone,PartialEq,Debug)]
    pub enum One_of_message {
        a_double_2(f64),
        an_enum_2(::protobuf::ProtobufEnumOrUnknown<super::AnEnum>),
        a_message_2(super::Inner),
    }

    impl ::protobuf::Oneof for One_of_message {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inner {
    // message fields
    pub double_default: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inner {
    fn default() -> &'a Inner {
        <Inner as ::protobuf::Message>::default_instance()
    }
}

impl Inner {
    pub fn new() -> Inner {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Inner {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.double_default = is.read_double()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.double_default != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.double_default != 0. {
            os.write_double(1, self.double_default)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inner {
        Inner::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_simple_field_accessor::<_, ::protobuf::reflect::types::ProtobufTypeDouble>(
                "double_default",
                |m: &Inner| { &m.double_default },
                |m: &mut Inner| { &mut m.double_default },
            ));
            ::protobuf::reflect::MessageDescriptor::new::<Inner>(
                "Inner",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inner {
        static instance: ::protobuf::rt::Lazy<Inner> = ::protobuf::rt::Lazy::INIT;
        instance.get(Inner::new)
    }
}

impl ::protobuf::Clear for Inner {
    fn clear(&mut self) {
        self.double_default = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inner {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inner {
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum AnEnum {
    NOT_SET = 0,
    A_CASE = 1,
    ANOTHER_CASE = 2,
}

impl ::protobuf::ProtobufEnum for AnEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AnEnum> {
        match value {
            0 => ::std::option::Option::Some(AnEnum::NOT_SET),
            1 => ::std::option::Option::Some(AnEnum::A_CASE),
            2 => ::std::option::Option::Some(AnEnum::ANOTHER_CASE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AnEnum] = &[
            AnEnum::NOT_SET,
            AnEnum::A_CASE,
            AnEnum::ANOTHER_CASE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<AnEnum>("AnEnum", file_descriptor_proto())
        })
    }
}

impl ::std::default::Default for AnEnum {
    fn default() -> Self {
        AnEnum::NOT_SET
    }
}

impl ::protobuf::reflect::ProtobufValue for AnEnum {
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11org_message.proto\x12\x0fbenji.infra.req\"\xbc\t\n\x08Compound\x12\
    %\n\x0edouble_default\x18\x01\x20\x01(\x01R\rdoubleDefault\x12,\n\x12dou\
    ble_non_default\x18\x02\x20\x01(\x01R\x10doubleNonDefault\x12:\n\x0cenum\
    _default\x18\x03\x20\x01(\x0e2\x17.benji.infra.req.AnEnumR\x0benumDefaul\
    t\x12=\n\x0eenum_o_default\x18\x04\x20\x01(\x0e2\x17.benji.infra.req.AnE\
    numR\x0cenumODefault\x129\n\x0cenum_o_empty\x18\x05\x20\x01(\x0e2\x17.be\
    nji.infra.req.AnEnumR\nenumOEmpty\x12?\n\x0fmessage_default\x18\x06\x20\
    \x01(\x0b2\x16.benji.infra.req.InnerR\x0emessageDefault\x12B\n\x11messag\
    e_o_default\x18\x07\x20\x01(\x0b2\x16.benji.infra.req.InnerR\x0fmessageO\
    Default\x12>\n\x0fmessage_o_empty\x18\x08\x20\x01(\x0b2\x16.benji.infra.\
    req.InnerR\rmessageOEmpty\x12\x1e\n\na_double_0\x18\t\x20\x01(\x01H\0R\
    \x08aDouble0\x125\n\tan_enum_0\x18\n\x20\x01(\x0e2\x17.benji.infra.req.A\
    nEnumH\0R\x07anEnum0\x128\n\x0ba_message_0\x18\x0b\x20\x01(\x0b2\x16.ben\
    ji.infra.req.InnerH\0R\taMessage0\x12\x1e\n\na_double_1\x18\x0c\x20\x01(\
    \x01H\x01R\x08aDouble1\x125\n\tan_enum_1\x18\r\x20\x01(\x0e2\x17.benji.i\
    nfra.req.AnEnumH\x01R\x07anEnum1\x128\n\x0ba_message_1\x18\x0e\x20\x01(\
    \x0b2\x16.benji.infra.req.InnerH\x01R\taMessage1\x12\x1e\n\na_double_2\
    \x18\x0f\x20\x01(\x01H\x02R\x08aDouble2\x125\n\tan_enum_2\x18\x10\x20\
    \x01(\x0e2\x17.benji.infra.req.AnEnumH\x02R\x07anEnum2\x128\n\x0ba_messa\
    ge_2\x18\x11\x20\x01(\x0b2\x16.benji.infra.req.InnerH\x02R\taMessage2\
    \x12#\n\rbytes_default\x18\x12\x20\x01(\x0cR\x0cbytesDefault\x12&\n\x0fb\
    ytes_o_default\x18\x13\x20\x01(\x0cR\rbytesODefault\x12\"\n\rbytes_o_emp\
    ty\x18\x14\x20\x01(\x0cR\x0bbytesOEmpty\x12,\n\x12vec_double_default\x18\
    \x15\x20\x03(\x01R\x10vecDoubleDefault\x12/\n\x14vec_double_o_default\
    \x18\x16\x20\x03(\x01R\x11vecDoubleODefault\x12+\n\x12vec_double_o_empty\
    \x18\x17\x20\x03(\x01R\x0fvecDoubleOEmptyB\x0f\n\rone_of_doubleB\r\n\x0b\
    one_of_enumB\x10\n\x0eone_of_message\".\n\x05Inner\x12%\n\x0edouble_defa\
    ult\x18\x01\x20\x01(\x01R\rdoubleDefault*3\n\x06AnEnum\x12\x0b\n\x07NOT_\
    SET\x10\0\x12\n\n\x06A_CASE\x10\x01\x12\x10\n\x0cANOTHER_CASE\x10\x02b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
